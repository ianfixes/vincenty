var search_data = {"index":{"searchIndex":["angle","coordinate","float","latitude","longitude","numeric","string","trackanddistance","vincenty","%()","*()","**()","+()","+@()","-()","-@()","/()","<=>()","abs()","coerce()","decimal_deg()","degrees()","destination()","distanceandangle()","dms()","new()","new()","new()","radians()","reverse()","round()","round0()","sign()","sign()","spheredestination()","sphericaldistanceandangle()","strf()","to_a()","to_ary()","to_ary()","to_bearing()","to_d()","to_d()","to_d()","to_dec_degrees()","to_degrees()","to_degrees()","to_degrees()","to_degrees()","to_degrees()","to_dms()","to_f()","to_hash()","to_hash()","to_i()","to_int()","to_r()","to_r()","to_r()","to_radians()","to_radians()","to_radians()","to_radians()","to_radians()","to_s()","to_s()","to_s()","to_s()","to_s()","version()","history","manifest"],"longSearchIndex":["angle","coordinate","float","latitude","longitude","numeric","string","trackanddistance","vincenty","angle#%()","angle#*()","angle#**()","angle#+()","angle#+@()","angle#-()","angle#-@()","angle#/()","angle#<=>()","angle#abs()","angle#coerce()","angle::decimal_deg()","angle::degrees()","vincenty#destination()","vincenty#distanceandangle()","angle::dms()","angle::new()","coordinate::new()","trackanddistance::new()","angle::radians()","angle#reverse()","float#round()","float#round0()","angle#sign()","numeric#sign()","vincenty#spheredestination()","vincenty#sphericaldistanceandangle()","angle#strf()","coordinate#to_a()","coordinate#to_ary()","trackanddistance#to_ary()","angle#to_bearing()","angle#to_d()","numeric#to_d()","string#to_d()","string#to_dec_degrees()","angle#to_degrees()","latitude#to_degrees()","longitude#to_degrees()","numeric#to_degrees()","string#to_degrees()","angle#to_dms()","angle#to_f()","coordinate#to_hash()","trackanddistance#to_hash()","angle#to_i()","angle#to_int()","angle#to_r()","numeric#to_r()","string#to_r()","angle#to_radians()","latitude#to_radians()","longitude#to_radians()","numeric#to_radians()","string#to_radians()","angle#to_s()","coordinate#to_s()","latitude#to_s()","longitude#to_s()","trackanddistance#to_s()","vincenty#version()","",""],"info":[["Angle","","Angle.html","",""],["Coordinate","","Coordinate.html","",""],["Float","","Float.html","","<p>Alters round method to have an optional number of decimal places.\n"],["Latitude","","Latitude.html","",""],["Longitude","","Longitude.html","",""],["Numeric","","Numeric.html","","<p>Extends Numeric, hence Fixed &amp; Float to_r &amp; to_d Also adds in sign.\n"],["String","","String.html","","<p>Extends String to to_dec_degrees, add to_r and to_d\n"],["TrackAndDistance","","TrackAndDistance.html","",""],["Vincenty","","Vincenty.html","",""],["%","Angle","Angle.html#method-i-25","(v)","<p>Returns: new Angle\n"],["*","Angle","Angle.html#method-i-2A","(v)","<p>Returns :new Angle\n"],["**","Angle","Angle.html#method-i-2A-2A","(v)","<p>Returns: new Angle\n"],["+","Angle","Angle.html#method-i-2B","(v)","<p>Returns :new Angle\n"],["+@","Angle","Angle.html#method-i-2B-40","()","<p>unary + Returns: new Angle\n"],["-","Angle","Angle.html#method-i-2D","(v)","<p>Returns: new Angle\n"],["-@","Angle","Angle.html#method-i-2D-40","()","<p>Unary - Returns: new Angle\n"],["/","Angle","Angle.html#method-i-2F","(v)","<p>Returns: new Angle\n"],["<=>","Angle","Angle.html#method-i-3C-3D-3E","(v)","<p>Provides test for Module Comparable\n"],["abs","Angle","Angle.html#method-i-abs","()","<p>Returns: the absolute value of the angle in radians\n"],["coerce","Angle","Angle.html#method-i-coerce","(v)",""],["decimal_deg","Angle","Angle.html#method-c-decimal_deg","(*a)","<p>Class level function that converts an array of up to 4 values into decimal\ndegrees. a is degrees, minutes, ...\n"],["degrees","Angle","Angle.html#method-c-degrees","(d=0)","<p>Class level function equivalent to Angle.new(d, false) or just Angle.new(d)\nReturns: new Angle\n"],["destination","Vincenty","Vincenty.html#method-i-destination","( track_and_distance )","\n<pre>Calculate destination point given start point lat/long, bearing and distance.</pre>\n<p>Assumes earth is a WGS-84 ...\n"],["distanceAndAngle","Vincenty","Vincenty.html#method-i-distanceAndAngle","( p2 )","<p>Vincenty's algorithm for finding bearing and distance between to\ncoordinates. Assumes earth is a WGS-84 ...\n"],["dms","Angle","Angle.html#method-c-dms","(v, radians = false)","<p>Class level utility function to return the value as deg,min,sec Assumes\ndecimal degress unless radians ...\n"],["new","Angle","Angle.html#method-c-new","(v=0, radians=false)","<p>v may be anything that has a to_f and to_radians. The Default for v is\ndegrees. if radians == true then ...\n"],["new","Coordinate","Coordinate.html#method-c-new","(latitude=0, longitude=0, altitude=0, radians = false)","<p>latitude and longitude can be Strings or Numeric, or anything else with\nto_radians and to_f latitude ...\n"],["new","TrackAndDistance","TrackAndDistance.html#method-c-new","(bearing, distance, radians=false)","<p>Bearing is in degrees unless radians == true. Bearing can be a String or\nNumeric or any object with  ...\n"],["radians","Angle","Angle.html#method-c-radians","(r=0)","<p>Class level function equivalent to Angle.new(r, true) Returns: new Angle\n"],["reverse","Angle","Angle.html#method-i-reverse","()","<p>Returns: the reverse angle in radians. i.e. angle + PI (or angle + 180\ndegrees)\n"],["round","Float","Float.html#method-i-round","(n = 0)","<p>Compatible Replacement for Float.round Optional argument n is the number of\ndecimal places to round to. ...\n"],["round0","Float","Float.html#method-i-round0","(n = 0)",""],["sign","Angle","Angle.html#method-i-sign","()","<p>Returns: the sign of the angle. 1 for positive, -1 for negative.\n"],["sign","Numeric","Numeric.html#method-i-sign","()","<p>Returns: 1 if number is positive, -1 if negative.\n"],["sphereDestination","Vincenty","Vincenty.html#method-i-sphereDestination","( track_and_distance )","<p>spherical earth estimate of calculation for finding target coordinate from\nstart coordinate, bearing ...\n"],["sphericalDistanceAndAngle","Vincenty","Vincenty.html#method-i-sphericalDistanceAndAngle","( p2 )","<p>Great Circle formulae  en.wikipedia.org/wiki/Great-circle_distance\nReference calculation for testing, ...\n"],["strf","Angle","Angle.html#method-i-strf","(fmt=\"%d^0%2m'%2.4s''\")","<p>formated output of the angle. The default format is a signed\ndeg^0minutes'seconds\" with leading 0's ...\n"],["to_a","Coordinate","Coordinate.html#method-i-to_a","()",""],["to_ary","Coordinate","Coordinate.html#method-i-to_ary","()",""],["to_ary","TrackAndDistance","TrackAndDistance.html#method-i-to_ary","()",""],["to_bearing","Angle","Angle.html#method-i-to_bearing","()","<p>Returns: angle as compass bearing in radians. Compass bearings are\nclockwise, Math angles are counter ...\n"],["to_d","Angle","Angle.html#method-i-to_d","()",""],["to_d","Numeric","Numeric.html#method-i-to_d","(mod=false)",""],["to_d","String","String.html#method-i-to_d","(mod=false)",""],["to_dec_degrees","String","String.html#method-i-to_dec_degrees","()","<p>string expected to be degrees, returns decimal degrees. common forms are\nS37^001'7.5\", 37^001'7.5\" ...\n"],["to_degrees","Angle","Angle.html#method-i-to_degrees","()","<p>Returns: angle in degrees\n"],["to_degrees","Latitude","Latitude.html#method-i-to_degrees","()","<p>Latitude degrees are between -90 and 90, South to North Returns angle as\ndegrees in range -90 and 90 ...\n"],["to_degrees","Longitude","Longitude.html#method-i-to_degrees","()","<p>Longitude degrees are between -180 and 180 West to East Returns angle as\ndegrees in range -180 and 180 ...\n"],["to_degrees","Numeric","Numeric.html#method-i-to_degrees","(mod=false)","<p>Convert Radians to Degrees if optional argument mod == true, then applies %\n360 Returns: degrees\n"],["to_degrees","String","String.html#method-i-to_degrees","(mod=false)","<p>Convert Radians to Degrees if optional argument mod == true, then applies %\n360 Returns: degrees\n"],["to_dms","Angle","Angle.html#method-i-to_dms","()","<p>Returns: [deg,min,sec] Nb. * That min will be negative if the angle is\nnegative and deg == 0\n\n<pre>* That sec ...</pre>\n"],["to_f","Angle","Angle.html#method-i-to_f","()","<p>Returns: the angle in radians as a float (equivalent to to_radians)\n"],["to_hash","Coordinate","Coordinate.html#method-i-to_hash","()",""],["to_hash","TrackAndDistance","TrackAndDistance.html#method-i-to_hash","()",""],["to_i","Angle","Angle.html#method-i-to_i","()","<p>Returns the angle truncated to an integer, in radians.\n"],["to_int","Angle","Angle.html#method-i-to_int","()",""],["to_r","Angle","Angle.html#method-i-to_r","()",""],["to_r","Numeric","Numeric.html#method-i-to_r","(mod=false)",""],["to_r","String","String.html#method-i-to_r","(mod=false)",""],["to_radians","Angle","Angle.html#method-i-to_radians","()","<p>Returns: angle in radians\n"],["to_radians","Latitude","Latitude.html#method-i-to_radians","()","<p>Latitude degrees are between -PI and PI, South to North Returns: angle as\ndegrees in range -PI and PI ...\n"],["to_radians","Longitude","Longitude.html#method-i-to_radians","()","<p>Longitude degrees are between -2PI and 2PI, West to East Returns: angle as\ndegrees in range -2PI and ...\n"],["to_radians","Numeric","Numeric.html#method-i-to_radians","(mod=false)","<p>Converts degrees to Radians if optional argument mod == true, then applies\n% Math::PI Returns: radians ...\n"],["to_radians","String","String.html#method-i-to_radians","(mod=false)","<p>Converts string degrees to to_decimal_degrees, then to Radians if optional\nargument mod == true, then ...\n"],["to_s","Angle","Angle.html#method-i-to_s","(fmt = nil)","<p>Returns: angle in radians as a string.\n"],["to_s","Coordinate","Coordinate.html#method-i-to_s","()","<p>Should add a format string to this. Returns: Latitude longitude and\naltitude as a single string.\n"],["to_s","Latitude","Latitude.html#method-i-to_s","(fmt='%2d^0%2m'%2.4s''%N') super(fmt) end alias to_r to_radians alias to_d to_degrees end","<p>Returns: angle as string in degrees minutes seconds direction. A South\nangle is negative, North is Positive ...\n"],["to_s","Longitude","Longitude.html#method-i-to_s","(fmt='%3d^0%2m'%2.4s''%E') super(fmt) end alias to_r to_radians alias to_d to_degrees end","<p>Returns: angle as string in degrees minutes seconds direction. A West angle\nis negative, East is Positive ...\n"],["to_s","TrackAndDistance","TrackAndDistance.html#method-i-to_s","(fmt = nil)","<p>format string fmt is currently just for the bearing angle. Need to change\nthis to include the distance ...\n"],["version","Vincenty","Vincenty.html#method-i-version","()",""],["History","","History_txt.html","","<p>1.0.1 / 2009-03-03\n<p>1 major enhancement\n<p>Birthday!\n"],["Manifest","","Manifest_txt.html","","<p>History.txt Manifest.txt README.md Rakefile lib/angle.rb lib/coordinate.rb\nlib/core_extensions.rb lib/latitude.rb ...\n"]]}}